name: ZVK Requests CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch

jobs:
  frontend_ci:
    name: Frontend CI (Next.js)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Frontend dependencies
        working-directory: ./client
        run: npm install

      - name: Build Frontend
        working-directory: ./client
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: https://api.zvk-requests.ru

      - name: Run Frontend tests
        working-directory: ./client
        run: npm test
        continue-on-error: true

  backend_ci_cd:
    name: Backend CI/CD (Go & Docker)
    runs-on: ubuntu-latest
    needs: frontend_ci
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Install Go dependencies
        working-directory: ./server
        run: go mod download

      - name: Build Go application
        working-directory: ./server
        run: CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .

      - name: Run Go tests
        working-directory: ./server
        run: go test ./...

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Server Image
        working-directory: ./server
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/zvk-requests-server:latest -f Dockerfile .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/zvk-requests-server:latest

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/zvk-requests
            git pull origin main

            # Создаем или обновляем корневой .env файл для Docker Compose (для PostgreSQL)
            cat > .env << EOF
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            EOF

            # Создаем или обновляем server/.env файл для Go-сервера
            # Используем те же данные для DB, но с host 'postgres' (имя сервиса Docker)
            mkdir -p server # Убеждаемся, что директория server существует
            cat > server/.env << EOF
            DB_HOST=postgres
            DB_PORT=5432
            DB_USER=${{ secrets.POSTGRES_USER }}
            DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            DB_NAME=${{ secrets.POSTGRES_DB }}
            DB_SSLMODE=disable

            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}

            SERVER_PORT=${{ secrets.SERVER_PORT }}
            APP_ENV=${{ secrets.APP_ENV }}

            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            EOF

            docker compose -f docker-compose.secure.yml pull server
            # Принудительно пересоздаем, чтобы новые .env файлы вступили в силу для postgres и server
            docker compose -f docker-compose.secure.yml up -d --build --force-recreate
            docker compose -f docker-compose.secure.yml ps

            echo "Deployment completed successfully!"